"use strict";(self.webpackChunknaptha_docs=self.webpackChunknaptha_docs||[]).push([[9598],{9786:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>d,contentTitle:()=>s,default:()=>h,frontMatter:()=>o,metadata:()=>i,toc:()=>p});var n=r(4848),a=r(8453);const o={},s="Database Storage",i={id:"NapthaStorage/database",title:"Database Storage",description:"We offer a powerful way to manage structured data via our database storage provider. You can interact with it using Naptha's SDK, either via the CLI or Python client interface.",source:"@site/docs/NapthaStorage/1-database.md",sourceDirName:"NapthaStorage",slug:"/NapthaStorage/database",permalink:"/NapthaStorage/database",draft:!1,unlisted:!1,editUrl:"https://github.com/NapthaAI/docs/tree/main/docs/NapthaStorage/1-database.md",tags:[],version:"current",sidebarPosition:1,frontMatter:{},sidebar:"docs",previous:{title:"Storage Provider",permalink:"/NapthaStorage/overview"},next:{title:"File System Storage",permalink:"/NapthaStorage/files"}},d={},p=[{value:"Create a Table",id:"create-a-table",level:2},{value:"Create a Row",id:"create-a-row",level:2},{value:"Update a Row",id:"update-a-row",level:2},{value:"Query a Table",id:"query-a-table",level:2},{value:"Vector similarity search",id:"vector-similarity-search",level:3},{value:"List Rows",id:"list-rows",level:2},{value:"Delete a Row",id:"delete-a-row",level:2},{value:"Delete a Table",id:"delete-a-table",level:2}];function c(e){const t={code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",p:"p",pre:"pre",strong:"strong",...(0,a.R)(),...e.components};return(0,n.jsxs)(n.Fragment,{children:[(0,n.jsx)(t.header,{children:(0,n.jsx)(t.h1,{id:"database-storage",children:"Database Storage"})}),"\n",(0,n.jsx)(t.p,{children:"We offer a powerful way to manage structured data via our database storage provider. You can interact with it using Naptha's SDK, either via the CLI or Python client interface."}),"\n",(0,n.jsxs)(t.p,{children:["For the ",(0,n.jsx)(t.code,{children:"CLI"})," option, the database storage provider commands start with ",(0,n.jsx)(t.code,{children:"naptha storage db"}),"."]}),"\n",(0,n.jsx)(t.p,{children:"Here are some examples of how to interact with the database storage:"}),"\n",(0,n.jsx)(t.h2,{id:"create-a-table",children:"Create a Table"}),"\n",(0,n.jsx)(t.p,{children:"To create a table in Naptha's database storage, you need to specify a dict with a schema field that specifies the structure and data types of your table. The schema is provided as a JSON object where each field defines a column's properties."}),"\n",(0,n.jsx)(t.p,{children:(0,n.jsx)(t.strong,{children:"Via CLI:"})}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{children:'naptha storage db create test_embeddings -d \'{\n  "schema": {\n    "id": {"type": "TEXT", "primary_key": true},\n    "text": {"type": "TEXT", "required": true},\n    "embedding": {"type": "vector", "dimension": 3}\n  }\n}\'\n'})}),"\n",(0,n.jsx)(t.p,{children:(0,n.jsx)(t.strong,{children:"In Python:"})}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{children:'import asyncio\nfrom naptha_sdk.schemas import NodeConfigUser\nfrom naptha_sdk.storage.storage_provider import StorageProvider\nfrom naptha_sdk.storage.schemas import CreateStorageRequest, StorageType\n\nnode = NodeConfigUser(ip="node.naptha.ai", http_port=7001, server_type="http")\nstorage_provider = StorageProvider(node)\n\nschema = {\n    "schema": {\n        "id": {"type": "TEXT", "primary_key": True},\n        "text": {"type": "TEXT", "required": True},\n        "embedding": {"type": "vector", "dimension": 384}\n    }\n}\n\ncreate_table_request = CreateStorageRequest(\n    storage_type=StorageType.DATABASE,\n    path="test_embeddings",\n    data=schema\n)\n\ncreate_table_result = asyncio.run(storage_provider.create_storage_object(create_table_request))\nprint("Create Table Result:", create_table_result)\n'})}),"\n",(0,n.jsx)(t.h2,{id:"create-a-row",children:"Create a Row"}),"\n",(0,n.jsx)(t.p,{children:"Similarly, to create a row you need to specify a dict with a data field."}),"\n",(0,n.jsx)(t.p,{children:(0,n.jsx)(t.strong,{children:"Via CLI:"})}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{children:'naptha storage db create test_embeddings -d \'{\n  "data": {\n    "id": "1",\n    "text": "This is a test document",\n    "embedding": [0.1, 0.1, 0.1]\n  }\n}\'\n'})}),"\n",(0,n.jsx)(t.p,{children:(0,n.jsx)(t.strong,{children:"In Python:"})}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{children:'import asyncio\nfrom naptha_sdk.schemas import NodeConfigUser\nfrom naptha_sdk.storage.storage_provider import StorageProvider\nfrom naptha_sdk.storage.schemas import CreateStorageRequest, StorageType\n\nnode = NodeConfigUser(ip="node.naptha.ai", http_port=7001, server_type="http")\nstorage_provider = StorageProvider(node)\n\ninsert_data = {\n    "data": {\n        "id": "6",\n        "text": "This is a test document",\n        "embedding": [0.1] * 384\n    }\n}\n\ncreate_row_request = CreateStorageRequest(\n    storage_type=StorageType.DATABASE,\n    path="test_embeddings",\n    data=insert_data\n)\n\ncreate_row_result = asyncio.run(storage_provider.execute(create_row_request))\nprint("Create Row Result:", create_row_result)\n'})}),"\n",(0,n.jsx)(t.h2,{id:"update-a-row",children:"Update a Row"}),"\n",(0,n.jsx)(t.p,{children:(0,n.jsx)(t.strong,{children:"Via CLI:"})}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{children:'naptha storage db update test_embeddings -d \'{\n  "data": {\n    "text": "Updated Document 1"\n  }\n}\' -o \'{"condition": {"text": "Document 1"}}\'\n'})}),"\n",(0,n.jsx)(t.p,{children:(0,n.jsx)(t.strong,{children:"In Python:"})}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{children:'import asyncio\nfrom naptha_sdk.schemas import NodeConfigUser\nfrom naptha_sdk.storage.storage_provider import StorageProvider\nfrom naptha_sdk.storage.schemas import UpdateStorageRequest, StorageType\n\nnode = NodeConfigUser(ip="node.naptha.ai", http_port=7001, server_type="http")\nstorage_provider = StorageProvider(node)\n\nupdate_data = {\n    "data": {\n        "text": "Updated Document 1"\n    }\n}\n\nupdate_request = UpdateStorageRequest(\n    storage_type=StorageType.DATABASE,\n    path="test_embeddings",\n    data=update_data,\n    options={"condition": {"text": "Document 1"}}  # Update where text = \'Document 1\'\n)\n\nupdate_result = asyncio.run(storage_provider.execute(update_request))\nprint("Update Result:", update_result)\n'})}),"\n",(0,n.jsx)(t.h2,{id:"query-a-table",children:"Query a Table"}),"\n",(0,n.jsx)(t.p,{children:"Fetch exactly what you need with flexible query options. You can select specific columns or perform vector similarity searches."}),"\n",(0,n.jsx)(t.p,{children:(0,n.jsx)(t.strong,{children:"Via CLI:"})}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{children:'naptha storage db read test_embeddings -o \'{\n  "columns": ["text", "id"]\n}\'\n'})}),"\n",(0,n.jsx)(t.p,{children:(0,n.jsx)(t.strong,{children:"In Python:"})}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{children:'import asyncio\nfrom naptha_sdk.schemas import NodeConfigUser\nfrom naptha_sdk.storage.storage_provider import StorageProvider\nfrom naptha_sdk.storage.schemas import ReadStorageRequest, StorageType\n\nnode = NodeConfigUser(ip="node.naptha.ai", http_port=7001, server_type="http")\nstorage_provider = StorageProvider(node)\n\nquery_request = ReadStorageRequest(\n    storage_type=StorageType.DATABASE,\n    path="test_embeddings",\n    options={\n        "columns": ["text", "id"]\n    }\n)\n\nquery_result = asyncio.run(storage_provider.execute(query_request))\nprint("Query Result:", query_result)\n'})}),"\n",(0,n.jsx)(t.h3,{id:"vector-similarity-search",children:"Vector similarity search"}),"\n",(0,n.jsx)(t.p,{children:"Leverage vector embeddings for semantic search and AI-powered queries. Perfect for finding similar content or nearest-neighbor searches."}),"\n",(0,n.jsx)(t.p,{children:(0,n.jsx)(t.strong,{children:"Via CLI:"})}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{children:'naptha storage db read test_embeddings -o \'{\n  "vector_col": "embedding",\n  "query_vector": [0.1, 0.1, 0.1],\n  "columns": ["text"],\n  "top_k": 2,\n  "include_similarity": true\n}\'\n'})}),"\n",(0,n.jsx)(t.p,{children:(0,n.jsx)(t.strong,{children:"In Python:"})}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{children:'import asyncio\nfrom naptha_sdk.schemas import NodeConfigUser\nfrom naptha_sdk.storage.storage_provider import StorageProvider\nfrom naptha_sdk.storage.schemas import ReadStorageRequest, StorageType\n\nnode = NodeConfigUser(ip="node.naptha.ai", http_port=7001, server_type="http")\nstorage_provider = StorageProvider(node)\n\nvector_request = ReadStorageRequest(\n    storage_type=StorageType.DATABASE,\n    path="test_embeddings",\n    options={\n        "vector_col": "embedding",\n        "query_vector": [0.1] * 384,\n        "columns": ["text"],\n        "top_k": 2,\n        "include_similarity": True\n    }\n)\n\nvector_result = asyncio.run(storage_provider.execute(vector_request))\nprint("Vector Similarity Search Result:", vector_result)\n'})}),"\n",(0,n.jsx)(t.h2,{id:"list-rows",children:"List Rows"}),"\n",(0,n.jsx)(t.p,{children:(0,n.jsx)(t.strong,{children:"Via CLI:"})}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{children:'naptha storage db list test_embeddings -o \'{\n  "limit": 10,\n  "offset": 0\n}\'\n'})}),"\n",(0,n.jsx)(t.p,{children:(0,n.jsx)(t.strong,{children:"In Python:"})}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{children:'import asyncio\nfrom naptha_sdk.schemas import NodeConfigUser\nfrom naptha_sdk.storage.storage_provider import StorageProvider\nfrom naptha_sdk.storage.schemas import ListStorageRequest, StorageType\n\nnode = NodeConfigUser(ip="node.naptha.ai", http_port=7001, server_type="http")\nstorage_provider = StorageProvider(node)\n\nlist_request = ListStorageRequest(\n    storage_type=StorageType.DATABASE,\n    path="test_embeddings",\n    options={\n        "limit": 10,\n        "offset": 0\n    }\n)\n\nlist_result = asyncio.run(storage_provider.execute(list_request))\nprint("List Rows Result:", list_result)\n'})}),"\n",(0,n.jsx)(t.h2,{id:"delete-a-row",children:"Delete a Row"}),"\n",(0,n.jsx)(t.p,{children:(0,n.jsx)(t.strong,{children:"Via CLI:"})}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{children:'naptha storage db delete test_embeddings -o \'{\n  "condition": {"text": "Document 1"}\n}\'\n'})}),"\n",(0,n.jsx)(t.p,{children:(0,n.jsx)(t.strong,{children:"In Python:"})}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{children:'import asyncio\nfrom naptha_sdk.schemas import NodeConfigUser\nfrom naptha_sdk.storage.storage_provider import StorageProvider\nfrom naptha_sdk.storage.schemas import DeleteStorageRequest, StorageType\n\nnode = NodeConfigUser(ip="node.naptha.ai", http_port=7001, server_type="http")\nstorage_provider = StorageProvider(node)\n\ndelete_rows_request = DeleteStorageRequest(\n    storage_type=StorageType.DATABASE,\n    path="test_embeddings",\n    condition={"text": "Document 1"}\n)\n\ndelete_rows_result = asyncio.run(storage_provider.execute(delete_rows_request))\nprint("Delete Rows Result:", delete_rows_result)\n'})}),"\n",(0,n.jsx)(t.h2,{id:"delete-a-table",children:"Delete a Table"}),"\n",(0,n.jsx)(t.p,{children:(0,n.jsx)(t.strong,{children:"Via CLI:"})}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{children:"naptha storage db delete test_embeddings\n"})}),"\n",(0,n.jsx)(t.p,{children:(0,n.jsx)(t.strong,{children:"In Python:"})}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{children:'import asyncio\nfrom naptha_sdk.schemas import NodeConfigUser\nfrom naptha_sdk.storage.storage_provider import StorageProvider\nfrom naptha_sdk.storage.schemas import DeleteStorageRequest, StorageType\n\nnode = NodeConfigUser(ip="node.naptha.ai", http_port=7001, server_type="http")\nstorage_provider = StorageProvider(node)\n\ndelete_table_request = DeleteStorageRequest(\n    storage_type=StorageType.DATABASE,\n    path="test_embeddings"\n)\n\ndelete_table_result = asyncio.run(storage_provider.execute(delete_table_request))\nprint("Delete Table Result:", delete_table_result)\n'})})]})}function h(e={}){const{wrapper:t}={...(0,a.R)(),...e.components};return t?(0,n.jsx)(t,{...e,children:(0,n.jsx)(c,{...e})}):c(e)}},8453:(e,t,r)=>{r.d(t,{R:()=>s,x:()=>i});var n=r(6540);const a={},o=n.createContext(a);function s(e){const t=n.useContext(o);return n.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function i(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:s(e.components),n.createElement(o.Provider,{value:t},e.children)}}}]);