"use strict";(self.webpackChunknaptha_docs=self.webpackChunknaptha_docs||[]).push([[5101],{1335:(e,r,n)=>{n.r(r),n.d(r,{assets:()=>p,contentTitle:()=>s,default:()=>h,frontMatter:()=>o,metadata:()=>i,toc:()=>d});var t=n(4848),a=n(8453);const o={},s="IPFS Storage",i={id:"NapthaStorage/ipfs",title:"IPFS Storage",description:"Naptha's storage provider also provides decentralized file storage via the IPFS network.",source:"@site/docs/NapthaStorage/3-ipfs.md",sourceDirName:"NapthaStorage",slug:"/NapthaStorage/ipfs",permalink:"/NapthaStorage/ipfs",draft:!1,unlisted:!1,editUrl:"https://github.com/NapthaAI/docs/tree/main/docs/NapthaStorage/3-ipfs.md",tags:[],version:"current",sidebarPosition:3,frontMatter:{},sidebar:"docs",previous:{title:"File System Storage",permalink:"/NapthaStorage/files"},next:{title:"List of Examples",permalink:"/Examples/"}},p={},d=[{value:"Upload a File",id:"upload-a-file",level:2},{value:"Download a File",id:"download-a-file",level:2},{value:"Upload a File with IPNS",id:"upload-a-file-with-ipns",level:2},{value:"Download a File with IPNS",id:"download-a-file-with-ipns",level:2},{value:"Update a File with IPNS",id:"update-a-file-with-ipns",level:2}];function l(e){const r={code:"code",h1:"h1",h2:"h2",header:"header",p:"p",pre:"pre",strong:"strong",...(0,a.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(r.header,{children:(0,t.jsx)(r.h1,{id:"ipfs-storage",children:"IPFS Storage"})}),"\n",(0,t.jsx)(r.p,{children:"Naptha's storage provider also provides decentralized file storage via the IPFS network."}),"\n",(0,t.jsx)(r.h2,{id:"upload-a-file",children:"Upload a File"}),"\n",(0,t.jsx)(r.p,{children:"Store files on the IPFS network"}),"\n",(0,t.jsx)(r.p,{children:(0,t.jsx)(r.strong,{children:"Via CLI:"})}),"\n",(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{children:"naptha storage ipfs create test -f README.md\n"})}),"\n",(0,t.jsx)(r.p,{children:(0,t.jsx)(r.strong,{children:"In Python:"})}),"\n",(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{children:'import asyncio\nfrom naptha_sdk.schemas import NodeConfigUser\nfrom naptha_sdk.storage.storage_provider import StorageProvider\nfrom naptha_sdk.storage.schemas import CreateStorageRequest, StorageType\n\nnode = NodeConfigUser(ip="node.naptha.ai", http_port=7001, server_type="http")\nstorage_provider = StorageProvider(node)\n\nupload_request = CreateStorageRequest(\n    storage_type=StorageType.IPFS,\n    path="test",\n    file="README.md"\n)\n    \nupload_result = asyncio.run(await storage_provider.execute(upload_request))\nprint("Basic IPFS upload result:", upload_result)\n'})}),"\n",(0,t.jsx)(r.h2,{id:"download-a-file",children:"Download a File"}),"\n",(0,t.jsx)(r.p,{children:"Retrieve files from IPFS using their unique hash."}),"\n",(0,t.jsx)(r.p,{children:(0,t.jsx)(r.strong,{children:"Via CLI:"})}),"\n",(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{children:"naptha storage ipfs read <IPFS_HASH>\n"})}),"\n",(0,t.jsx)(r.p,{children:(0,t.jsx)(r.strong,{children:"In Python:"})}),"\n",(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{children:'import asyncio\nfrom naptha_sdk.schemas import NodeConfigUser\nfrom naptha_sdk.storage.storage_provider import StorageProvider\nfrom naptha_sdk.storage.schemas import ReadStorageRequest, StorageType\n\nnode = NodeConfigUser(ip="node.naptha.ai", http_port=7001, server_type="http")\nstorage_provider = StorageProvider(node)\n\nread_request = ReadStorageRequest(\n    storage_type=StorageType.IPFS,\n    path=ipfs_hash\n)\n\nread_result = asyncio.run(await storage_provider.execute(read_request))\nprint("IPFS read result:", read_result)\n'})}),"\n",(0,t.jsx)(r.h2,{id:"upload-a-file-with-ipns",children:"Upload a File with IPNS"}),"\n",(0,t.jsx)(r.p,{children:(0,t.jsx)(r.strong,{children:"Via CLI:"})}),"\n",(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{children:'naptha storage ipfs create test -f README.md -o \'{"ipns_operation": "create"}\'\n'})}),"\n",(0,t.jsx)(r.p,{children:(0,t.jsx)(r.strong,{children:"In Python:"})}),"\n",(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{children:'import asyncio\nfrom naptha_sdk.schemas import NodeConfigUser\nfrom naptha_sdk.storage.storage_provider import StorageProvider\nfrom naptha_sdk.storage.schemas import CreateStorageRequest, StorageType\n\nnode = NodeConfigUser(ip="node.naptha.ai", http_port=7001, server_type="http")\nstorage_provider = StorageProvider(node)\n\nipns_request = CreateStorageRequest(\n    storage_type=StorageType.IPFS,\n    path="test",\n    file="README.md",\n    data={\n        "ipns_operation": "create"\n    }\n)\nipns_result = asyncio.run(await storage_provider.execute(ipns_request))\nprint("IPNS upload result:", ipns_result)\n'})}),"\n",(0,t.jsx)(r.h2,{id:"download-a-file-with-ipns",children:"Download a File with IPNS"}),"\n",(0,t.jsx)(r.p,{children:"Retrieve the latest version of a file using its IPNS name."}),"\n",(0,t.jsx)(r.p,{children:(0,t.jsx)(r.strong,{children:"Via CLI:"})}),"\n",(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{children:"naptha storage ipfs read <IPNS_NAME>\n"})}),"\n",(0,t.jsx)(r.p,{children:(0,t.jsx)(r.strong,{children:"In Python:"})}),"\n",(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{children:'import asyncio\nfrom naptha_sdk.schemas import NodeConfigUser\nfrom naptha_sdk.storage.storage_provider import StorageProvider\nfrom naptha_sdk.storage.schemas import ReadStorageRequest, StorageType\n\nnode = NodeConfigUser(ip="node.naptha.ai", http_port=7001, server_type="http")\nstorage_provider = StorageProvider(node)\n\nipns_read_request = ReadStorageRequest(\n    storage_type=StorageType.IPFS,\n    path=ipns_hash,\n    options={\n        "resolve_ipns": True\n    }\n)\n\nipns_read_result = asyncio.run(await storage_provider.execute(ipns_read_request))\nprint("IPNS read result:", ipns_read_result)\n'})}),"\n",(0,t.jsx)(r.h2,{id:"update-a-file-with-ipns",children:"Update a File with IPNS"}),"\n",(0,t.jsx)(r.p,{children:(0,t.jsx)(r.strong,{children:"Via CLI:"})}),"\n",(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{children:'naptha storage ipfs create test -f pyproject.toml -o \'{\n    "ipns_operation": "update",\n    "ipns_name": "k51qzi5uqu5djw7nqlbxf6smmx51vksu1pes119ooomwd7h4swpg0d5iyjcdp5",\n    "unpin_previous": "True",\n    "previous_hash": "QmPKjW53SLwb2YAoPV47Guvva4bGBgynhVa91M9MwSjLj9"\n}\'\n'})})]})}function h(e={}){const{wrapper:r}={...(0,a.R)(),...e.components};return r?(0,t.jsx)(r,{...e,children:(0,t.jsx)(l,{...e})}):l(e)}},8453:(e,r,n)=>{n.d(r,{R:()=>s,x:()=>i});var t=n(6540);const a={},o=t.createContext(a);function s(e){const r=t.useContext(o);return t.useMemo((function(){return"function"==typeof e?e(r):{...r,...e}}),[r,e])}function i(e){let r;return r=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:s(e.components),t.createElement(o.Provider,{value:r},e.children)}}}]);