"use strict";(self.webpackChunknaptha_docs=self.webpackChunknaptha_docs||[]).push([[855],{8197:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>d,contentTitle:()=>s,default:()=>h,frontMatter:()=>o,metadata:()=>i,toc:()=>l});var a=r(4848),n=r(8453);const o={},s="Storage Provider",i={id:"NapthaStorage/overview",title:"Storage Provider",description:"Naptha Modules often need to store and retrieve data locally on their Naptha Nodes. This can be done via the Naptha Storage API, which provides a secure way to store and manage data locally and privately.",source:"@site/docs/NapthaStorage/0-overview.md",sourceDirName:"NapthaStorage",slug:"/NapthaStorage/overview",permalink:"/NapthaStorage/overview",draft:!1,unlisted:!1,editUrl:"https://github.com/NapthaAI/docs/tree/main/docs/NapthaStorage/0-overview.md",tags:[],version:"current",sidebarPosition:0,frontMatter:{},sidebar:"docs",previous:{title:"Inference Client",permalink:"/NapthaInference/inference"},next:{title:"Database Storage",permalink:"/NapthaStorage/database"}},d={},l=[{value:"Core Features",id:"core-features",level:2},{value:"Available Storage Types",id:"available-storage-types",level:2},{value:"Need Help?",id:"need-help",level:2}];function c(e){const t={a:"a",code:"code",h1:"h1",h2:"h2",header:"header",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,n.R)(),...e.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(t.header,{children:(0,a.jsx)(t.h1,{id:"storage-provider",children:"Storage Provider"})}),"\n",(0,a.jsx)(t.p,{children:"Naptha Modules often need to store and retrieve data locally on their Naptha Nodes. This can be done via the Naptha Storage API, which provides a secure way to store and manage data locally and privately."}),"\n",(0,a.jsx)(t.h2,{id:"core-features",children:"Core Features"}),"\n",(0,a.jsxs)(t.ul,{children:["\n",(0,a.jsxs)(t.li,{children:[(0,a.jsx)(t.strong,{children:"Consistent Interface"}),": All storage types share the same basic operations (",(0,a.jsx)(t.code,{children:"create"}),", ",(0,a.jsx)(t.code,{children:"read"}),", ",(0,a.jsx)(t.code,{children:"update"}),", ",(0,a.jsx)(t.code,{children:"delete"}),", ",(0,a.jsx)(t.code,{children:"list"}),", ",(0,a.jsx)(t.code,{children:"search"}),")"]}),"\n",(0,a.jsxs)(t.li,{children:[(0,a.jsx)(t.strong,{children:"Options Pattern"}),": The options parameter allows for storage-specific features without breaking the common interface"]}),"\n",(0,a.jsxs)(t.li,{children:[(0,a.jsx)(t.strong,{children:"Extensible"}),": Easy to add new storage providers by implementing the StorageProvider interface"]}),"\n"]}),"\n",(0,a.jsx)(t.h2,{id:"available-storage-types",children:"Available Storage Types"}),"\n",(0,a.jsx)(t.p,{children:"Naptha Nodes support several types of storage, including filesystem storage, database storage, and IPFS storage."}),"\n",(0,a.jsxs)(t.ul,{children:["\n",(0,a.jsxs)(t.li,{children:[(0,a.jsx)(t.strong,{children:"Database Storage"}),": For structured data and efficient queries"]}),"\n",(0,a.jsxs)(t.li,{children:[(0,a.jsx)(t.strong,{children:"File System Storage"}),": For local file management and quick access"]}),"\n",(0,a.jsxs)(t.li,{children:[(0,a.jsx)(t.strong,{children:"IPFS Storage"}),": For decentralized and persistent data storage"]}),"\n"]}),"\n",(0,a.jsxs)(t.p,{children:["When building a module, you can import the ",(0,a.jsx)(t.code,{children:"StorageProvider"})," class from the Naptha SDK to interact with storage providers. For example, to create a table in a database storage provider, you can use the following code:"]}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-python",children:'from naptha_sdk.schemas import NodeConfigUser\nfrom naptha_sdk.storage.storage_provider import StorageProvider\n\nnode = NodeConfigUser(ip="node.naptha.ai", http_port=7001, server_type="http")\nstorage_provider = StorageProvider(node)\n'})}),"\n",(0,a.jsxs)(t.p,{children:["You can also interact with storage directly via the CLI using the ",(0,a.jsx)(t.code,{children:"naptha storage"})," series of commands, followed by the storage provider type (e.g. ",(0,a.jsx)(t.code,{children:"db"})," ",(0,a.jsx)(t.code,{children:"fs"}),", ",(0,a.jsx)(t.code,{children:"ipfs"}),"). For example, you can download the file from the node using:"]}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{children:"naptha storage fs read <agent_run_id>\n"})}),"\n",(0,a.jsx)(t.p,{children:"or interact with IPFS thorugh Node using:"}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{children:"naptha storage ipfs create -d files/<filename>.jpg\n"})}),"\n",(0,a.jsx)(t.h2,{id:"need-help",children:"Need Help?"}),"\n",(0,a.jsxs)(t.ul,{children:["\n",(0,a.jsxs)(t.li,{children:["Join our ",(0,a.jsx)(t.a,{href:"https://naptha.ai/naptha-community",children:"Discord Community"})]}),"\n",(0,a.jsxs)(t.li,{children:["Submit issues on ",(0,a.jsx)(t.a,{href:"https://github.com/NapthaAI",children:"GitHub"})]}),"\n"]})]})}function h(e={}){const{wrapper:t}={...(0,n.R)(),...e.components};return t?(0,a.jsx)(t,{...e,children:(0,a.jsx)(c,{...e})}):c(e)}},8453:(e,t,r)=>{r.d(t,{R:()=>s,x:()=>i});var a=r(6540);const n={},o=a.createContext(n);function s(e){const t=a.useContext(o);return a.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function i(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(n):e.components||n:s(e.components),a.createElement(o.Provider,{value:t},e.children)}}}]);